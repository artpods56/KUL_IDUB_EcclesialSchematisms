"""
This type stub file was generated by pyright.
"""

from typing import List, Literal, Optional, Tuple, Union, overload
from PIL import Image
from omegaconf import DictConfig
from core.models.base import ConfigurableModel

def ocr_page(pil_image: Image.Image, language: str = ..., text_only: bool = ..., psm_mode: int = ..., oem_mode: int = ...) -> Union[str, Tuple[List[str], List[List[int]]]]:
    """Run PyTesseract OCR on a page.

    Args:
        pil_image: The image to be processed.
        language: Languages passed to Tesseract (e.g. "eng+deu").
        text_only: If ``True`` only return the full text string (no word bboxes).
        psm_mode: Page segmentation mode for Tesseract.
        oem_mode: OCR Engine Mode for Tesseract.

    Returns:
        Either a string (``text_only=True``) or a tuple ``(words, bboxes)``.
        Bounding boxes follow LayoutLMv3 convention of 0-1000 normalized coordinates:
        ``[xmin, ymin, xmax, ymax]``.
    """
    ...

class OcrModel(ConfigurableModel):
    """PyTesseract OCR model wrapper with caching.

    The model exposes a unified ``predict`` method returning either the full OCR text or
    word-level bounding boxes depending on the *text_only* flag.
    """
    def __init__(self, config: DictConfig, enable_cache: Optional[bool] = ..., language: Optional[str] = ...) -> None:
        ...
    
    @classmethod
    def from_config(cls, config: DictConfig) -> OcrModel:
        ...
    
    @overload
    def predict(self, image: Image.Image, text_only: Literal[True], **kwargs) -> str:
        """Perform OCR on *image* and return text only."""
        ...
    
    @overload
    def predict(self, image: Image.Image, text_only: Literal[False], **kwargs) -> Tuple[list, list]:
        """Perform OCR on *image* and return words and bounding boxes."""
        ...
    
    def predict(self, image: Image.Image, text_only: bool = ..., **kwargs) -> Union[str, Tuple[list, list]]:
        """Perform OCR on *image*.

        Args:
            image: Input image as ``PIL.Image``.
            text_only: If ``True`` returns a single string of the page; otherwise returns
                a tuple ``(words, bboxes)``.
            metadata: Optional metadata for caching and tracking
        """
        ...
    


